"""
Script para inspeccionar qu√© caracter√≠sticas fueron guardadas en el modelo
y diagnosticar el problema de compatibilidad
"""

from pathlib import Path
import joblib

def inspect_model_features():
    """Inspecciona las caracter√≠sticas guardadas en el modelo m√°s reciente"""
    
    current_dir = Path(__file__).parent
    
    # Buscar modelos
    models_path_new = current_dir / "trained_models"
    models_path_legacy = current_dir.parent / "models"
    
    # Encontrar el modelo m√°s reciente
    all_models = []
    for path in [models_path_new, models_path_legacy]:
        if path.exists():
            all_models.extend(list(path.glob("exoplanet_ensemble_*.pkl")))
    
    if not all_models:
        print("‚ùå No se encontraron modelos")
        return
    
    latest_model = max(all_models, key=lambda x: x.stat().st_mtime)
    
    print(f"üîç INSPECCIONANDO MODELO: {latest_model.name}")
    print("="*60)
    
    # Cargar modelo
    model_info = joblib.load(latest_model)
    
    print(f"üìä Informaci√≥n del modelo:")
    print(f"   ‚Ä¢ Accuracy: {model_info['accuracy']:.4f}")
    print(f"   ‚Ä¢ Datasets entrenamiento: {model_info['training_datasets']}")
    print(f"   ‚Ä¢ Timestamp: {model_info['timestamp']}")
    
    # Caracter√≠sticas comunes
    common_features = model_info['common_features']
    print(f"\nüéØ CARACTER√çSTICAS COMUNES ({len(common_features)}):")
    for i, feature in enumerate(common_features, 1):
        print(f"   {i:2d}. {feature}")
    
    # Mapeo de etiquetas
    label_mapping = model_info['label_mapping']
    print(f"\nüè∑Ô∏è MAPEO DE ETIQUETAS:")
    for dataset, mapping in label_mapping.items():
        print(f"   {dataset}: {mapping}")
    
    # Informaci√≥n del preprocessor
    if 'preprocessor' in model_info:
        preprocessor = model_info['preprocessor']
        print(f"\nüîß INFORMACI√ìN DEL PREPROCESSOR:")
        print(f"   ‚Ä¢ Tipo: {type(preprocessor).__name__}")
        
        # Ver qu√© componentes tiene el preprocessor
        if hasattr(preprocessor, 'feature_engineer'):
            print(f"   ‚Ä¢ Feature Engineer: {type(preprocessor.feature_engineer).__name__}")
        
        if hasattr(preprocessor, 'scalers'):
            print(f"   ‚Ä¢ Scalers disponibles: {list(preprocessor.scalers.keys())}")
        
        if hasattr(preprocessor, 'imputers'):
            print(f"   ‚Ä¢ Imputers disponibles: {list(preprocessor.imputers.keys())}")
    
    return model_info

def test_feature_engineering():
    """Prueba la creaci√≥n de caracter√≠sticas en un dataset de ejemplo"""
    print(f"\nüß™ PROBANDO FEATURE ENGINEERING")
    print("="*40)
    
    try:
        from Clasification import DataLoader
        from train_ensemble import FeatureEngineer
        
        # Cargar un dataset peque√±o para probar
        current_dir = Path(__file__).parent
        project_root = current_dir.parent
        
        loader = DataLoader(project_root)
        datasets = loader.load_all_datasets()
        
        if 'KOI' in datasets:
            df_koi = datasets['KOI'].head(10)  # Solo 10 filas para prueba
            
            print(f"üìä Dataset original KOI: {df_koi.shape}")
            print(f"   Columnas: {list(df_koi.columns[:10])}")
            
            # Probar feature engineering
            fe = FeatureEngineer()
            df_engineered = fe.create_astronomical_features(df_koi, 'KOI')
            
            print(f"\nüîß Despu√©s del feature engineering: {df_engineered.shape}")
            
            # Nuevas caracter√≠sticas creadas
            original_cols = set(df_koi.columns)
            new_cols = set(df_engineered.columns) - original_cols
            
            print(f"\n‚ú® NUEVAS CARACTER√çSTICAS CREADAS ({len(new_cols)}):")
            for col in sorted(new_cols):
                print(f"   ‚Ä¢ {col}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en feature engineering: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîç DIAGN√ìSTICO DE COMPATIBILIDAD DE CARACTER√çSTICAS")
    print("="*70)
    
    # Paso 1: Inspeccionar modelo
    model_info = inspect_model_features()
    
    # Paso 2: Probar feature engineering
    if model_info:
        success = test_feature_engineering()
        
        if success:
            print(f"\nüìã DIAGN√ìSTICO:")
            print("="*20)
            print("‚úÖ El feature engineering funciona correctamente")
            print("‚ö†Ô∏è Problema probablemente en la compatibilidad de caracter√≠sticas")
            print("üîß Soluci√≥n: Ajustar el proceso de predicci√≥n")
        else:
            print(f"\n‚ùå PROBLEMA ENCONTRADO:")
            print("="*25)
            print("El feature engineering tiene errors")
    else:
        print("‚ùå No se pudo cargar el modelo para diagn√≥stico")