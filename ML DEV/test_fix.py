#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test simple para verificar que el fix del FastStackingEnsemble funciona correctamente
"""
import sys
from pathlib import Path
import joblib

# Agregar el directorio actual al path
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

print("üß™ PROBANDO EL FIX DE FASTSTACKINGENSEMBLE")
print("="*50)

# 1. Importar el sistema de compatibilidad
try:
    import model_imports
    print("‚úÖ model_imports importado correctamente")
    
    # Verificar compatibilidad
    is_compatible = model_imports.check_model_compatibility()
    if is_compatible:
        print("‚úÖ Todas las clases est√°n disponibles (6/6)")
    else:
        print("‚ùå Algunas clases no est√°n disponibles")
    
    # IMPORTANTE: Importar las clases directamente para joblib
    from train_ensemble_FAST import FastStackingEnsemble
    from train_ensemble import StackingEnsemble, DataPreprocessor, FeatureEngineer
    from train_ensemble_CORRECTED import FeatureMapper, ImprovedDataPreprocessor
    print("‚úÖ Clases importadas directamente para joblib")
        
except ImportError as e:
    print(f"‚ùå Error importando clases: {e}")
    sys.exit(1)

# 2. Buscar modelo m√°s reciente
models_dir = current_dir.parent / "models"
model_files = list(models_dir.glob("*.pkl"))

if not model_files:
    print("‚ùå No se encontraron modelos .pkl")
    sys.exit(1)

# Ordenar por fecha de modificaci√≥n (m√°s reciente primero)
latest_model = max(model_files, key=lambda x: x.stat().st_mtime)
print(f"\nüîç Modelo m√°s reciente: {latest_model.name}")

# 3. Intentar cargar el modelo
try:
    print(f"\nüîÑ Cargando modelo...")
    model = joblib.load(str(latest_model))
    print(f"‚úÖ Modelo cargado exitosamente!")
    print(f"   Tipo: {type(model)}")
    
    # Verificar si tiene atributos esperados
    if hasattr(model, 'predict'):
        print("‚úÖ M√©todo predict disponible")
    if hasattr(model, 'predict_proba'):
        print("‚úÖ M√©todo predict_proba disponible")
        
except Exception as e:
    print(f"‚ùå Error cargando modelo: {e}")
    print(f"   Tipo de error: {type(e)}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# 4. Probar Process.py sin ejecutar el men√∫
try:
    print(f"\nüîÑ Probando importaci√≥n de Process.py...")
    import importlib.util
    
    spec = importlib.util.spec_from_file_location("process_module", current_dir / "Process.py")
    process_module = importlib.util.module_from_spec(spec)
    
    # Ejecutar solo las importaciones, no el main()
    spec.loader.exec_module(process_module)
    print("‚úÖ Process.py se puede importar sin errores!")
    
except Exception as e:
    print(f"‚ùå Error importando Process.py: {e}")
    print(f"   Tipo de error: {type(e)}")

print(f"\nüéâ PRUEBAS COMPLETADAS")
print("="*50)
print("El fix del FastStackingEnsemble est√° funcionando correctamente!")